export class WalletComponent implements OnInit {
  currentWallet?: Wallet;
  exchangeRates: ExchangeRate[] = [];
  loading = true;
  balance = 0;

  constructor(
    private currencyService: CurrencyService,
    private authService: UserService
  ) {}

  ngOnInit() {
    this.loadWalletAndRates();
  }

  private loadWalletAndRates() {
    this.authService.getCurrentUser().subscribe(response => {
      const user = response.data; // Assurez-vous que l'API renvoie un 'data' contenant 'wallets'
      if (user?.wallets && user.wallets.length > 0) {
        this.currentWallet = user.wallets[0];
        this.balance = parseFloat(this.currentWallet.balance);
        this.exchangeRates = this.currencyService.getExchangeRates();
        this.loading = false;
      } else {
        console.warn("No wallets found for the current user.");
        this.loading = false;
      }
    }, error => {
      console.error("Error fetching user data:", error);
      this.loading = false;
    });
  }


  getConvertedBalance(targetCurrency: string): number {
    return this.currencyService.convertFromCFA(this.balance, targetCurrency);
  }
}
<!-- src/app/components/wallet/wallet.component.html -->
<div class="wallet-container">
<div *ngIf="!loading" class="balance-info">
  <h2>Balance in CFA</h2>
  <p>{{ balance | currency:'CFA':'symbol':'1.2-2' }}</p>
</div>

<div *ngIf="!loading" class="currency-grid">
<div *ngFor="let currency of exchangeRates" class="currency-card" [ngClass]="currency.color">
<div class="currency-info">
<span class="flag">{{ currency.flag }}</span>
<span class="code">{{ currency.code }}</span>
<span class="country">{{ currency.country }}</span>
<span class="trend" [ngClass]="currency.trend.startsWith('+') ? 'text-emerald-100' : 'text-red-100'">
  {{ currency.trend }}
</span>
</div>
<div class="balance">
  {{ getConvertedBalance(currency.code) | currency:currency.code:'symbol':'1.2-2' }}
</div>
</div>
</div>
</div>

export class ContactsComponent implements OnInit {
  allContacts: Contact[] = [];
  displayedContacts: Contact[] = [];
  showAddContact = false;
  showSearch = false;
  searchTerm: string = '';
  newContact = {
    phone: '',
    nickname: ''
  };

  pageSize: number = 10;
  currentPage: number = 1;
  totalPages: number = 1;

  isImporting = false;
  importStats: {
    totalContacts: number;
    contactsWithEmail: number;
    matchedUsers: number;
    importedContacts: number;
    existingContacts: number;
  } | null = null;

  constructor(
    private contactService: ContactService,
    private contactGoogleService: GoogleAuthService
  ) {}

  ngOnInit() {
    this.loadContacts();
    this.handleGoogleAuthCallback();
  }

  private handleGoogleAuthCallback() {
    // Écouter le message de callback de Google Auth
    window.addEventListener('message', (event) => {
      if (event.data.type === 'google-auth-success' && event.data.code) {
        this.handleGoogleAuthSuccess(event.data.code);
      }
    });
  }

  private handleGoogleAuthSuccess(code: string) {
    this.startImport();
  }

  loadContacts() {
    this.contactService.getContacts().subscribe({
      next: (response) => {
        this.allContacts = response.data;
        this.filterAndPaginateContacts();
      },
      error: (error) => {
        console.error('Erreur lors du chargement des contacts:', error);
      }
    });
  }

  filterAndPaginateContacts() {
    let filteredContacts = this.allContacts;

    if (this.searchTerm && this.searchTerm.length >= 3) {
      const searchLower = this.searchTerm.toLowerCase();
      filteredContacts = this.allContacts.filter(contact => {
        const nickname = contact.nickname?.toLowerCase() || '';
        return nickname.includes(searchLower);
      });
    }

    this.totalPages = Math.ceil(filteredContacts.length / this.pageSize);
    if (this.currentPage > this.totalPages) {
      this.currentPage = Math.max(1, this.totalPages);
    }

    const start = (this.currentPage - 1) * this.pageSize;
    const end = start + this.pageSize;
    this.displayedContacts = filteredContacts.slice(start, end);
  }

  onSearch() {
    this.currentPage = 1;
    this.filterAndPaginateContacts();
  }

  toggleSearch() {
    this.showSearch = !this.showSearch;
    if (!this.showSearch) {
      this.searchTerm = '';
      this.filterAndPaginateContacts();
    }
  }

  changePage(newPage: number) {
    if (newPage >= 1 && newPage <= this.totalPages) {
      this.currentPage = newPage;
      this.filterAndPaginateContacts();
    }
  }

  addContact() {
    this.contactService.createContactByPhone(
      this.newContact.phone,
      this.newContact.nickname
    ).subscribe({
      next: () => {
        this.loadContacts();
        this.showAddContact = false;
        this.newContact = { phone: '', nickname: '' };
      },
      error: (error) => {
        console.error('Erreur lors de l\'ajout du contact:', error);
      }
    });
  }

  editContact(contact: Contact) {
    const nickname = prompt('Nouveau surnom:', contact.nickname || '');
    if (nickname !== null) {
      this.contactService.updateContact(contact.id, nickname).subscribe({
        next: () => {
          this.loadContacts();
        },
        error: (error) => {
          console.error('Erreur lors de la modification du contact:', error);
        }
      });
    }
  }

  deleteContact(id: string) {
    if (confirm('Êtes-vous sûr de vouloir supprimer ce contact ?')) {
      this.contactService.deleteContact(id).subscribe({
        next: () => {
          this.loadContacts();
        },
        error: (error) => {
          console.error('Erreur lors de la suppression du contact:', error);
        }
      });
    }
  }

  importGoogleContacts() {
    this.isImporting = true;
    this.contactGoogleService.getGoogleAuthUrl().subscribe({
      next: (response) => {
        if (response.data && response.data.url) {
          window.open(
            response.data.url,  // Ici on accède correctement à l'URL
            'googleAuth',
            'width=500,height=600,scrollbars=yes'
          );
        }
        this.isImporting = false;
      },
      error: (error) => {
        console.error('Erreur lors de la récupération de l\'URL:', error);
        this.isImporting = false;
      }
    });
  }
}
<div class="max-w-6xl mx-auto mb-4">
<div class="relative overflow-hidden bg-gradient-to-r from-violet-600 via-blue-600 to-indigo-700 p-3 sm:p-8 rounded-2xl shadow-2xl w-full">
  <!-- Effet de brillance d'arrière-plan -->
<div class="absolute top-0 left-0 w-full h-full bg-white/10 backdrop-blur-3xl rounded-full scale-150 -translate-x-1/2 -translate-y-1/2"></div>

  <div class="bg-white/95 backdrop-blur-sm rounded-xl shadow-lg relative">
  <!-- En-tête avec recherche -->
<div class="p-6 border-b border-gray-100">
<div class="flex justify-between items-center mb-6">
<div>
  <button (click)="showAddContact = true"
class="px-4 py-2.5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all duration-200 flex items-center gap-2 shadow-lg shadow-blue-500/30 hover:shadow-blue-600/40 hover:-translate-y-0.5">
<i class="fas fa-plus-circle w-4 h-4"></i>
  <span class="text-sm">Ajouter</span>
</button>
</div>
<button (click)="toggleSearch()"
class="px-4 py-2.5 text-gray-600 hover:bg-gray-100 rounded-lg transition-all duration-200 flex items-center gap-2 hover:-translate-y-0.5"
  [class.bg-gray-100]="showSearch">
<i class="fas fa-search w-4 h-4"></i>
  </button>
  </div>

  <!-- Barre de recherche améliorée -->
  <div class="relative">
<div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
<i class="fas fa-search text-gray-400 w-4 h-4"></i>
  </div>
  <input type="text"
  [(ngModel)]="searchTerm"
(ngModelChange)="onSearch()"
class="block w-full pl-11 pr-12 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-200 bg-gray-50/50"
placeholder="Rechercher par surnom (min. 3 caractères)">
<button *ngIf="searchTerm"
(click)="searchTerm = ''; onSearch()"
class="absolute inset-y-0 right-0 pr-4 flex items-center">
<i class="fas fa-times text-gray-400 w-4 h-4 hover:text-gray-600 transition-colors"></i>
  </button>
  </div>
  </div>

  <!-- Liste des contacts -->
  <div class="p-6" *ngIf="searchTerm && searchTerm.length >= 3">
  <!-- Message si aucun résultat -->
<div *ngIf="displayedContacts.length === 0"
class="text-center py-12 text-gray-500 bg-gray-50/50 rounded-xl">
<i class="fas fa-search mb-3 text-3xl text-gray-400"></i>
  <p class="text-sm">Aucun contact ne correspond à votre recherche</p>
</div>

<!-- Résultats de recherche -->
<div class="space-y-3" *ngIf="displayedContacts.length > 0">
<div *ngFor="let contact of displayedContacts"
class="flex items-center justify-between p-4 border border-gray-100 rounded-xl hover:bg-gray-50/50 transition-all duration-200 hover:shadow-md group">
<div class="flex items-center space-x-4">
<div class="w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-indigo-600 flex items-center justify-center text-white shadow-lg">
  {{contact.contact?.firstName?.charAt(0) || contact.contact?.phoneNumber?.charAt(0)}}
</div>
<div>
<h3 class="font-medium text-gray-900">
  {{contact.nickname || contact.contact?.firstName + ' ' + contact.contact?.lastName || contact.contact?.phoneNumber}}
</h3>
<p class="text-sm text-gray-500">{{contact.contact?.phoneNumber}}</p>
</div>
</div>
<div class="flex space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
<button (click)="editContact(contact)"
class="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors">
<i class="fas fa-edit w-4 h-4"></i>
</button>
<button (click)="deleteContact(contact.id)"
class="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors">
<i class="fas fa-trash-alt w-4 h-4"></i>
  </button>
  </div>
  </div>
  </div>

  <!-- Pagination améliorée -->
  <div class="mt-6 pt-6 border-t border-gray-100" *ngIf="displayedContacts.length > 0">
<div class="flex items-center justify-center">
<div class="flex items-center space-x-2 bg-gray-50 rounded-lg p-1">
<button (click)="changePage(currentPage - 1)"
  [disabled]="currentPage === 1"
class="p-2 rounded-lg hover:bg-white disabled:opacity-50 disabled:hover:bg-transparent transition-colors">
<i class="fas fa-chevron-left w-4 h-4"></i>
  </button>
  <span class="px-4 py-2 font-medium text-sm">
  {{ currentPage }} / {{ totalPages }}
</span>
<button (click)="changePage(currentPage + 1)"
  [disabled]="currentPage === totalPages"
class="p-2 rounded-lg hover:bg-white disabled:opacity-50 disabled:hover:bg-transparent transition-colors">
<i class="fas fa-chevron-right w-4 h-4"></i>
  </button>

export class TransactionListComponent implements OnInit {
  currentUser$: Observable<ApiResponse<User>>;
  transactions: Transaction[] = [];
  displayedTransactions: Transaction[] = []; // Pour stocker les transactions affichées
  loading = true;
  currentWalletId: string = '';

  constructor(
    private router: Router,
    private userService: UserService
  ) {
    this.currentUser$ = this.userService.getCurrentUser();
  }

  ngOnInit() {
    this.currentUser$.subscribe(response => {
      const wallet = response?.data?.wallets?.[0];

      if (wallet) {
        this.currentWalletId = wallet.id;

        // Combine et trie les transactions envoyées et reçues
        this.transactions = [
          ...(wallet.sentTransactions ?? []), // Utilisation de ?? pour éviter des valeurs nulles
          ...(wallet.receivedTransactions ?? [])
        ].sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());

        // Assignez les transactions à afficher
        this.displayedTransactions = this.transactions;
      }

      this.loading = false;
    });
  }

  getTransactionPartner(transaction: Transaction): string {
    if (transaction.senderWalletId === this.currentWalletId) {
      // Vérifiez si receiverWallet existe avant d'accéder à ses propriétés
      const receiver = transaction.receiverWallet?.user;
      return receiver ? `${receiver.firstName} ${receiver.lastName}` : 'Partenaire inconnu';
    } else {
      // Vérifiez si senderWallet existe avant d'accéder à ses propriétés
      const sender = transaction.senderWallet?.user;
      return sender ? `${sender.firstName} ${sender.lastName}` : 'Partenaire inconnu';
    }
  }


  getTransactionType(transaction: Transaction): string {
    return transaction.senderWalletId === this.currentWalletId ? 'ENVOYÉ' : 'REÇU';
  }

  getAmountPrefix(transaction: Transaction): string {
    return transaction.senderWalletId === this.currentWalletId ? '-' : '+';
  }

  onFilter() {
    // Logique de filtrage ici
  }

  onSort() {
    // Logique de tri ici
  }

  viewAll() {
    this.router.navigate(['/transactions']);
  }
}
<div class="bg-white rounded-lg shadow-sm p-3">
<div class="flex justify-between items-center mb-3">
<div class="flex items-center gap-2">
<svg class="w-5 h-5 text-green-500" viewBox="0 0 24 24" fill="none" stroke="currentColor">
<path d="M7 12l3-3m0 0l3 3m-3-3v7m6-2v2a2 2 0 01-2 2H7a2 2 0 01-2-2v-2" stroke-width="2" stroke-linecap="round"/>
  </svg>
  <h2 class="text-xl font-medium">Activité Récente</h2>
</div>
<div class="flex gap-3">
<button (click)="onFilter()" class="flex items-center gap-2 px-4 py-2 rounded-full bg-gray-50 hover:bg-gray-100">
<svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor">
<path d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414v6.586a1 1 0 01-1.414.914l-2-1A1 1 0 0110 19.414V13.414L3.293 7.293A1 1 0 013 6.586V4z" stroke-width="2"/>
  </svg>
Filtrer
</button>
<button (click)="onSort()" class="flex items-center gap-2 px-4 py-2 rounded-full bg-gray-50 hover:bg-gray-100">
<svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor">
<path d="M3 4h13M3 8h9M3 12h5m8 0l-4-4m4 4l-4 4" stroke-width="2" stroke-linecap="round"/>
  </svg>
Trier
</button>
<button (click)="viewAll()" class="flex items-center gap-2 px-4 py-2 rounded-full bg-gray-50 hover:bg-gray-100">
<span class="text-lg">⋯</span>
</button>
</div>
</div>

<!-- Tableau -->
<div class="overflow-x-auto">
<table class="min-w-full divide-y divide-gray-200">
<thead class="bg-gray-50">
<tr class="text-sm text-gray-500 font-medium uppercase">
<th class="px-4 py-2 text-left">Type</th>
  <th class="px-4 py-2 text-left">Montant</th>
  <th class="px-4 py-2 text-left">État</th>
  </tr>
  </thead>
  <tbody class="bg-white divide-y divide-gray-200">
<tr *ngFor="let transaction of displayedTransactions" class="hover:bg-gray-100">
  <!-- Type Column -->
<td class="px-4 py-3">
<div class="flex items-center gap-3">
<div [ngClass]="{'bg-green-100': getTransactionType(transaction) === 'REÇU',
'bg-blue-100': getTransactionType(transaction) === 'ENVOYÉ'}"
class="w-10 h-10 rounded-full flex items-center justify-center">
<span [ngClass]="{'text-green-600': getTransactionType(transaction) === 'REÇU',
'text-blue-600': getTransactionType(transaction) === 'ENVOYÉ'}"
class="text-lg">
  {{ getTransactionType(transaction) === 'ENVOYÉ' ? '↑' : '+' }}
</span>
</div>
<div>
<div class="font-medium">{{ getTransactionPartner(transaction) }}</div>
<div class="text-sm text-gray-500">{{ transaction.createdAt | date:'MMM dd, yyyy' }}</div>
</div>
</div>
</td>

<!-- Amount Column -->
<td class="px-4 py-3">
<div class="font-medium">
  {{ getAmountPrefix(transaction) }}{{ transaction.amount | currency:'EUR':'symbol':'1.0-0' }}
</div>
<div class="text-sm text-gray-500">
  {{ transaction.feeAmount | currency:'USD':'symbol':'1.0-0' }} <!-- Taux de conversion approximatif -->
</div>
</td>

<!-- Status Column -->
<td class="px-4 py-3">
<span [ngClass]="{
'bg-green-100 text-green-600': transaction.status === 'COMPLETED',
  'bg-gray-100 text-gray-600': transaction.status === 'PENDING'
}" class="px-3 py-1 rounded-full text-sm font-medium">
{{ transaction.status }}
</span>
</td>
</tr>
</tbody>
</table>
</div>

<!-- Loading State -->
<div *ngIf="loading" class="flex justify-center items-center py-8">
<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
</div>

<!-- Empty State -->
<div *ngIf="!loading && displayedTransactions.length === 0"
class="text-center py-8 text-gray-500">
  Aucune transaction trouvée
</div>
</div>
export interface TransferFormData {
    amount: number;
    description?: string;
    receiverPhone: string;
}
@Component({
    selector: 'app-transfer',
    standalone: true,
    imports: [ReactiveFormsModule, NgIf],
    templateUrl: './transfer.component.html'
})
export class TransferComponent {
    @Input() receiverPhone: string = '';
    @Input() editablePhone: boolean = false;
    @Output() onClose = new EventEmitter<void>();
    @Output() onSuccess = new EventEmitter<TransferFormData>();

    transferForm: FormGroup;

    constructor(
        private fb: FormBuilder,
        private transactionService: TransactionService
    ) {
        this.transferForm = this.fb.group({
            amount: ['', [Validators.required, Validators.min(0)]],
            description: [''],
            receiverPhone: ['', [Validators.required, Validators.pattern(/^\+?[1-9]\d{1,14}$/)]]
        });
    }

    ngOnInit() {
        if (this.receiverPhone) {
            this.transferForm.patchValue({ receiverPhone: this.receiverPhone });
        }
    }

    onSubmitTransfer() {
        if (this.transferForm.valid) {
            const formData = this.transferForm.value;
            this.transactionService.createTransfer(formData).subscribe({
                next: (response) => {
                    this.onSuccess.emit(formData);
                    this.onClose.emit();
                },
                error: (error) => console.error('Erreur de transfert:', error)
            });
        }
    }
}
<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
<div class="bg-white p-6 rounded-lg shadow-xl w-96">
<div class="flex justify-between items-center mb-4">
<h3 class="text-lg font-semibold">Effectuer un transfert</h3>
<button (click)="onClose.emit()" class="text-gray-500 hover:text-gray-700">
<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
</svg>
</button>
</div>

<form [formGroup]="transferForm" (ngSubmit)="onSubmitTransfer()" class="space-y-4">
<div>
  <label class="block text-sm font-medium text-gray-700">Destinataire</label>
  <input
type="text"
formControlName="receiverPhone"
class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
  [readonly]="!editablePhone"
  [placeholder]="editablePhone ? 'Entrez le numéro de téléphone' : ''"
>
</div>

<div>
<label class="block text-sm font-medium text-gray-700">Montant</label>
  <input
type="number"
formControlName="amount"
class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
placeholder="Entrez le montant"
>
</div>

<div>
<label class="block text-sm font-medium text-gray-700">Description</label>
  <textarea
formControlName="description"
class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
rows="3"
placeholder="Description optionnelle"
  ></textarea>
  </div>

  <div class="flex justify-end space-x-3">
<button
  type="button"
(click)="onClose.emit()"
class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
  >
  Annuler
  </button>
  <button
type="submit"
  [disabled]="!transferForm.valid"
class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-gray-400"
  >
  Envoyer
  </button>
  </div>
  </form>
  </div>
  </div>
@Component({
  selector: 'app-qr-code',
  standalone: true,
  imports: [QRCodeModule, ZXingScannerModule, NgIf, TransferComponent],
  templateUrl: './qr-code.component.html',
  styles: [`
    :host {
      display: block;
      width: 100%;
    }

    zxing-scanner {
      width: 300px;
      height: 300px;
      border-radius: 8px;
      overflow: hidden;
    }
  `]
})
export class QrCodeComponent implements OnInit {
  qrData: string = '';
  showQRCode: boolean = false;
  showScanner: boolean = false;
  showTransfer: boolean = false;
  scannedPhone: string = '';
  isDirectTransfer: boolean = false;

  constructor(private userService: UserService) {}

  ngOnInit() {
    this.userService.getCurrentUser().subscribe({
      next: (response) => {
        if (response.data?.wallets?.[0]) {
          if (response.data.wallets) {
            this.qrData = response.data.wallets[0].qrCode;
          }
        }
      },
      error: (error) => console.error('Erreur:', error)
    });
  }

  toggleQRCode() {
    this.showQRCode = !this.showQRCode;
    if (this.showQRCode) {
      this.showScanner = false;
      this.showTransfer = false;
    }
  }
  toggleQRCodeOrScanner() {
    // Si le QR code est affiché, alors on bascule sur le scanner
    if (this.showQRCode) {
      this.showQRCode = false;
      this.showScanner = true;
    } else {
      this.showScanner = false;
      this.showQRCode = true;
    }
  }


  toggleScanner() {
    this.showScanner = !this.showScanner;
    if (this.showScanner) {
      this.showQRCode = false;
      this.showTransfer = false;
    }
  }

  showTransferModal() {
    this.showTransfer = true;
    this.isDirectTransfer = true;
    this.scannedPhone = '';
    this.showQRCode = false;
    this.showScanner = false;
  }

  onCodeScanned(resultString: string) {
    this.showScanner = false;
    const phoneNumber = resultString.split('wave.com/')[1];
    this.scannedPhone = phoneNumber;
    this.isDirectTransfer = false;
    this.showTransfer = true;
  }

  closeTransfer() {
    this.showTransfer = false;
    this.scannedPhone = '';
    this.isDirectTransfer = false;
  }

  onTransferSuccess(data: TransferFormData) {
    console.log('Transfert réussi:', data);
    // Gérer le succès du transfert (notifications, redirections, etc.)
    this.closeTransfer();
  }

  protected readonly BarcodeFormat = BarcodeFormat;
}
<div class="flex flex-col items-center justify-center space-y-4">
  <!-- Carte d'action -->
<div class="flex flex-col items-center">
<div class="bg-white p-6 rounded-lg shadow-xl cursor-pointer" (click)="toggleQRCodeOrScanner()">
<svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-blue-600 mx-auto" viewBox="0 0 20 20" fill="currentColor">
<path fill-rule="evenodd" d="M3 4a1 1 0 011-1h3a1 1 0 011 1v3a1 1 0 01-1 1H4a1 1 0 01-1-1V4zm2 2V5h1v1H5zM3 13a1 1 0 011-1h3a1 1 0 011 1v3a1 1 0 01-1 1H4a1 1 0 01-1-1v-3zm2 2v-1h1v1H5zM13 3a1 1 0 00-1 1v3a1 1 0 001 1h3a1 1 0 001-1V4a1 1 0 00-1-1h-3zm1 2v1h1V5h-1z" clip-rule="evenodd" />
  </svg>
  <span class="text-lg font-semibold mt-2">QR Code / Scanner</span>
</div>
</div>

<!-- QR Code Modal -->
<div *ngIf="showQRCode" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
<div class="bg-white p-6 rounded-lg shadow-xl">
<div class="flex justify-between items-center mb-4">
<h3 class="text-lg font-semibold">Votre QR Code</h3>
<button (click)="toggleQRCode()" class="text-gray-500 hover:text-gray-700">
<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
</svg>
</button>
</div>
<qrcode
  [qrdata]="qrData"
  [width]="200"
  [errorCorrectionLevel]="'M'"
  [margin]="2">
</qrcode>
<!-- Bouton pour ouvrir le scanner -->
<button (click)="toggleScanner()" class="mt-4 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
  Ouvrir Scanner
</button>
</div>
</div>

<!-- Scanner Modal -->
<div *ngIf="showScanner" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
<div class="bg-white p-6 rounded-lg shadow-xl">
<div class="flex justify-between items-center mb-4">
<h3 class="text-lg font-semibold">Scanner un QR Code</h3>
<button (click)="toggleScanner()" class="text-gray-500 hover:text-gray-700">
<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
</svg>
</button>
</div>
<zxing-scanner
(scanSuccess)="onCodeScanned($event)"
  [formats]="[BarcodeFormat.QR_CODE]"
></zxing-scanner>
</div>
</div>

<!-- Composant de transfert -->
<app-transfer
*ngIf="showTransfer"
  [receiverPhone]="scannedPhone"
  [editablePhone]="isDirectTransfer"
(onClose)="closeTransfer()"
(onSuccess)="onTransferSuccess($event)"
  ></app-transfer>
  </div>
@Component({
  selector: 'app-dashboard-client',
  templateUrl: './dashboard-client.component.html',
  standalone:true,
  imports: [
    TransactionListComponent,
    ContactsComponent,
    WalletComponent,
    NgIf,
    QrCodeComponent
  ],
})
export class DashboardClientComponent implements OnInit {
  loading = true;
  error: string | null = null;

  constructor(
    private walletService: WalletService,
    private transactionService: TransactionService,
    private contactService: ContactService,
    private userService: UserService
  ) {}

  ngOnInit() {
    this.loadDashboardData();
  }

  private loadDashboardData() {
    const currentUser$ = this.userService.getCurrentUser();
    const wallet$ = this.walletService.getUserWallet();
    const transactions$ = this.transactionService.getAllTransactionsByUser('current');
    const contacts$ = this.contactService.getContacts();

    forkJoin({
      user: currentUser$,
      wallet: wallet$,
      transactions: transactions$,
      contacts: contacts$
    }).subscribe({
      next: (data) => {
        this.loading = false;
      },
      error: (error) => {
        this.error = 'Erreur lors du chargement des données';
        this.loading = false;
      }
    });
  }
}
<div class="bg-gray-100 min-h-screen flex items-center justify-center p-4 w-full">
<ng-container *ngIf="!loading; else loadingTemplate">
<div class="bg-white shadow-2xl rounded-lg p-12 w-full max-w-7xl mx-auto flex"> <!-- Utilisation de flex pour contenir les colonnes -->

<!-- Colonne pour les transactions -->
<div class="w-1/3 p-4">
<h2 class="text-2xl font-bold mb-4">Transactions</h2>
  <app-transaction-list></app-transaction-list>
  </div>

  <!-- Colonne pour le portefeuille -->
  <div class="w-1/3 p-4">
<h2 class="text-2xl font-bold mb-4">Mon Portefeuille</h2>
<app-wallet></app-wallet>
</div>

<!-- Colonne pour le transfert rapide -->
<div class="w-1/3 p-4">
<h2 class="text-2xl font-bold mb-4">Transfert Rapide</h2>
<app-qr-code></app-qr-code>
<app-contacts/>
</div>
</div>
</ng-container>

<ng-template #loadingTemplate>
<div class="flex justify-center items-center min-h-[400px]">
<div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
  </div>
  </ng-template>
  </div>
